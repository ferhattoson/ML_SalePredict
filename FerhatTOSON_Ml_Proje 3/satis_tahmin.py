# -*- coding: utf-8 -*-
"""satis_tahmin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vu4LXknrsWI2WJV4aKwbH1J3P9RhY0BC
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from google.colab import files
uploaded = files.upload()

"""
### **Veri Seti Yükleme**"""

data = pd.read_csv("satis.csv")
data.head(20)

"""### **Veri Önişleme**"""

data.info()

data.shape

data.columns

data.isnull().sum()

data = data.rename(columns={'Sales': 'satış Sayısı','Newspaper':'Gazete'})
data.head(20)

"""### **Veri Görselleştirme**

"""

import plotly.express as px
import plotly.graph_objects as go
figure = px.scatter(data_frame = data, x="satış Sayısı",
                    y="TV", size="TV", trendline="ols")
figure.show()

figure = px.scatter(data_frame = data, x="satış Sayısı",
                    y="Gazete", size="Gazete", trendline="ols")
figure.show()

figure = px.scatter(data_frame = data, x="satış Sayısı",
                    y="Radio", size="Radio", trendline="ols")
figure.show()

"""
### **normalizasyon işlemi**"""

correlation = data.corr()
print(correlation["satış Sayısı"].sort_values(ascending=False))

"""### **Veri Seti Ayırma**"""

x = np.array(data.drop(["satış Sayısı"], 1))
y = np.array(data["satış Sayısı"])
xtrain, xtest, ytrain, ytest = train_test_split(x, y, 
                                                test_size=0.2, 
                                                random_state=42)

"""### **Model ile Eğitme**"""

model = LinearRegression()
model.fit(xtrain, ytrain)
print(model.score(xtest, ytest))

"""
### **k-katlı çapraz doğrulama**


"""

from sklearn.model_selection import cross_val_score

k = 5  # K sayısı, isteğe bağlı olarak değiştirilebilir
scores = cross_val_score(model, x, y, cv=k, scoring='r2')

# Sonuçları yazdırma
print("R^2 Skorları:", scores)
print("Ortalama R^2 Skoru:", scores.mean())

"""### **Tahmin Etme** """

features = np.array([[230.1, 37.8, 69.2]])
print(model.predict(features))

"""### **2. Model ile Eğitme**"""

from sklearn.ensemble import RandomForestRegressor
model2 = RandomForestRegressor()
model2.fit(xtrain, ytrain)
print(model2.score(xtest, ytest))

"""### **Tahmin Etme** """

features = np.array([[230.1, 37.8, 69.2]])
print(model2.predict(features))

"""###**Doğruluk Oranları,Ortalam Hata Oranları**"""

# Doğruluk oranı değeri
accuracy = model2.score(xtest, ytest)
# Sonuçları yazdırma
print("Doğruluk Oranı:", accuracy)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

y_pred = model2.predict(xtest)

# R^2 skoru
r2 = r2_score(ytest, y_pred)

# Ortalama Mutlak Hata (Mean Absolute Error, MAE)
mae = mean_absolute_error(ytest, y_pred)

# Ortalama Kare Hata (Mean Squared Error, MSE)
mse = mean_squared_error(ytest, y_pred)

# Sonuçları yazdırma
print("R^2 Skoru:", r2)
print("MAE:", mae)
print("MSE:", mse)